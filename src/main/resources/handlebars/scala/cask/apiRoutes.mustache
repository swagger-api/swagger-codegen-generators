{{>licenseInfo}}

package {{apiPackage}}

{{#imports}}import {{import}}
{{/imports}}


final case class {{classname}}Routes(service : {{classname}}Service) extends cask.Routes {

{{#route-groups}}

    {{caskAnnotation}}("{{pathPrefix}}", true)
    def {{methodName}}(request: cask.Request{{>queryParamsTyped}}) = {
        request.remainingPathSegments match {
    {{#operations}}
            case Seq({{>pathExtractor}}) => {{operationId}}({{>pathExtractorParams}}request{{>queryParams}})
    {{/operations}}
    {{^hasEmptyRouteGroup}}
            case Seq() => asHttpResponse(Right(ServiceResponse.NotFound))
    {{/hasEmptyRouteGroup}}
        }
    }
{{/route-groups}}
{{#operations}}
    {{#operation}}
        {{vendorExtensions.x-debug}}
        /** {{#summary}}{{summary}}{{/summary}}
{{#description}}         * {{{description}}}{{/description}}
         */
        // x-annotation
        {{vendorExtensions.x-annotation}}("{{vendorExtensions.x-cask-path}}")
        def {{operationId}}({{vendorExtensions.x-cask-path-typed}}) = {
        {{#authMethods}}
            // auth method {{name}} : {{type}}, keyParamName: {{keyParamName}}
        {{/authMethods}}

        val serviceResponse = {{>parseHttpParams}}

        asHttpResponse(serviceResponse)
      }
    {{/operation}}
{{/operations}}

  private def asHttpResponse[A](serviceResponse : Either[String, ServiceResponse[A]]): cask.Response[String] = {
        serviceResponse match {
            case Right(ServiceResponse.Ok(value)) => cask.Response(value.toString())
            case Right(ServiceResponse.NotFound) => cask.Response("Not Found", statusCode = 404)
            case Right(ServiceResponse.Other(code, msg)) => cask.Response(msg.getOrElse(s"Service returned $code"), statusCode = code)
            case Left(err) => cask.Response(s"Error: $err", statusCode = 500)
        }
  }
  initialize()
}
