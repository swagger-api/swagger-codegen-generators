//
// YearMonthDay.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

public struct YearMonthDay {
    public let year: Int
    public let month: Int
    public let day: Int
}

extension YearMonthDay: Codable, Equatable, Hashable, Comparable {
    public init(from date: Date = Date()) {
        let calendar = Calendar(identifier: .iso8601)

        year = calendar.component(.year, from: date)
        month = calendar.component(.month, from: date)
        day = calendar.component(.day, from: date)
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        let rawDate = try container.decode(String.self)
        let formatter = ISO8601DateFormatter()
        formatter.formatOptions = .withFullDate
        guard let date = formatter.date(from: rawDate)
            else { throw DecodingError.dataCorruptedError(in: container,
                                                      debugDescription: "Cannot decode date string \(rawDate)") }

        let dateComponents = Calendar(identifier: .iso8601).dateComponents(in: TimeZone(secondsFromGMT: 0)!, from: date)

        guard let year = dateComponents.year,
            let month = dateComponents.month,
            let day = dateComponents.day
            else { throw DecodingError.dataCorruptedError(in: container,
                                                          debugDescription: "Cannot decode date string \(rawDate)") }

        self.year = year
        self.month = month
        self.day = day
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        let rawDate = String(describing: self)

        let formatter = ISO8601DateFormatter()
        formatter.formatOptions = .withFullDate
        guard formatter.date(from: rawDate) != nil
            else { throw EncodingError.invalidValue(self, EncodingError.Context(codingPath: container.codingPath,
                                                                                debugDescription: "Cannot encode \(self)")) }
        try container.encode(rawDate)
    }

    public static func < (lhs: YearMonthDay, rhs: YearMonthDay) -> Bool {
        if lhs.year < rhs.year {
            return true
        } else if lhs.year > rhs.year {
            return false
        } else {
            if lhs.month < rhs.month {
                return true
            } else if lhs.month > rhs.month {
                return false
            } else {
                return lhs.day < rhs.day
            }
        }
    }

    public func add(years: Int = 0, months: Int = 0, days: Int = 0) -> YearMonthDay? {
        var dateComponents = DateComponents()
        dateComponents.year = year + years
        dateComponents.month = month + months
        dateComponents.day = day + days

        guard let date = Calendar(identifier: .iso8601).date(from: dateComponents)
            else { return nil }

        return YearMonthDay(from: date)
    }
}

extension YearMonthDay: CustomStringConvertible {
    public var description: String {
        return [String(format: "%04d", year), String(format: "%02d", month), String(format: "%02d", day)].joined(separator: "-")
    }
}