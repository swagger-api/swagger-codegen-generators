import 'dart:convert';
import 'dart:io';

import 'package:dart_frog/dart_frog.dart';

// Import models used by operations
{{#each imports}}
import '{{import}}';
{{/each}}

Future<Response> onRequest(RequestContext context{{#with operations.operation.[0]}}{{#each pathParams}}, {{dataType}} {{paramName}}{{/each}}{{/with}}) async {
  final request = context.request;

  /// Call appropriate HTTP method
  switch (request.method) {
{{#each httpVerbs}}
    {{#each operations.operation}}
        {{#eq httpMethod ../this}}
    case HttpMethod.{{lower httpMethod}}:
            {{#if queryParams}}
        /// Define query parameters
                {{#each queryParams}}
                    {{#eq dataType 'int'}}
        final {{paramName}} = int.tryParse(request.uri.queryParameters['{{paramName}}'] ?? '{{maximum}}');
                    {{/eq}}
                    {{#eq dataType 'String'}}
        final {{paramName}} = request.uri.queryParameters['{{paramName}}'];
                    {{/eq}}
                {{/each}}
            {{/if}}
            {{#if bodyParams}}
        /// Define body parameters
                {{#each bodyParams}}
        final {{paramName}} = await request.json() as Map<String, dynamic>;
                {{/each}}
            {{/if}}
            {{#if headerParams}}
        /// Define header parameters
            {{/if}}
            {{#if cookieParams}}
        /// Define cookie parameters
            {{/if}}
            {{#if formParams}}
        /// Define form parameters
            {{/if}}
        return _{{lower httpMethod}}({{#each allParams}}{{#if @index}}, {{/if}}{{paramName}}{{/each}});
        {{/eq}}
    {{/each}}
{{/each}}
    // ignore: no_default_cases
    default:
      return Response(
        statusCode: 405,
        body: 'Method ${request.method} is not allowed',
      );
  }
}

{{#each httpVerbs}}
    {{#each operations.operation}}
        {{#eq httpMethod ../this}}
Future<Response> _{{lower httpMethod}}({{#each allParams}}{{#if @index}}, {{/if}}{{dataType}} {{paramName}}{{/each}}) async {
    throw UnimplementedError(
        "This is a stub generated by Swagger Codegen. "
        "You must implement this method");
}
        {{/eq}}
    {{/each}}
{{/each}}