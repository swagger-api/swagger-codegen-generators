  /**
   * {{^description}}Gets or Sets {{{name}}}{{/description}}{{#description}}{{{description}}}{{/description}}
   */
  public enum {{#datatypeWithEnum}}{{{.}}}{{/datatypeWithEnum}}{{^datatypeWithEnum}}{{classname}}{{/datatypeWithEnum}} {
    {{#if gson}}
        {{#if allowableValues}}
            {{#if allowableValues.enumVars}}
    @SerializedName({{#is this 'integer'}}"{{/is}}{{#is this 'double'}}"{{/is}}{{#is this 'long'}}"{{/is}}{{#is this 'float'}}"{{/is}}{{{value}}}{{#is this 'integer'}}"{{/is}}{{#is this 'double'}}"{{/is}}{{#is this 'long'}}"{{/is}}{{#is this 'float'}}"{{/is}})
    {{{name}}}({{{value}}}){{^@last}},
    {{/@last}}{{#@last}};{{/@last}}
            {{/if}}
        {{/if}}
    {{/if}}
    {{#unless gson}}
        {{#allowableValues}}
            {{#enumVars}}
    {{{name}}}({{{value}}}){{^@last}},
    {{/@last}}{{#@last}};{{/@last}}
            {{/enumVars}}
        {{/allowableValues}}
    {{/unless}}

    private {{{datatype}}} value;

    {{#datatypeWithEnum}}{{{.}}}{{/datatypeWithEnum}}{{^datatypeWithEnum}}{{classname}}{{/datatypeWithEnum}}({{{datatype}}} value) {
      this.value = value;
    }

    @Override
    @JsonValue
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static {{#datatypeWithEnum}}{{{.}}}{{/datatypeWithEnum}}{{^datatypeWithEnum}}{{{classname}}}{{/datatypeWithEnum}} fromValue(String text) {
      for ({{#datatypeWithEnum}}{{{.}}}{{/datatypeWithEnum}}{{^datatypeWithEnum}}{{{classname}}}{{/datatypeWithEnum}} b : {{#datatypeWithEnum}}{{{.}}}{{/datatypeWithEnum}}{{^datatypeWithEnum}}{{{classname}}}{{/datatypeWithEnum}}.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      {{^errorOnUnknownEnum}}return null;{{/errorOnUnknownEnum}}{{#errorOnUnknownEnum}}throw new IllegalArgumentException("Unexpected value '" + text + "' for '{{{classname}}}' enum.");{{/errorOnUnknownEnum}}
    }
  }
